"""
Helgason et al. (2012).
"""

import numpy as np

# Table 2
cols = ['l_eff', 'N', 'zmax', 'Mstar', 'q', 'pstar', 'p', 'alpha', 'r']
fits_lf = \
{
 'UV': [0.15, 24, 8.0, -19.62, 1.1, 2.43, 0.2, -1.00, 0.086],
 'U':  [0.36, 27, 4.5, -20.20, 1.0, 5.46, 0.5, -1.00, 0.076],
 'B':  [0.45, 44, 4.5, -21.35, 0.6, 3.41, 0.4, -1.00, 0.055],
 'V':  [0.55, 18, 3.6, -22.13, 0.5, 2.42, 0.5, -1.00, 0.060],
 'R':  [0.65, 25, 3.0, -22.40, 0.5, 2.25, 0.5, -1.00, 0.070],
 'I':  [0.79, 17, 3.0, -22.80, 0.4, 2.05, 0.4, -1.00, 0.070],
 'z':  [0.91, 7,  2.9, -22.86, 0.4, 2.55, 0.4, -1.00, 0.060],
 'J':  [1.27, 15, 3.2, -23.04, 0.4, 2.21, 0.6, -1.00, 0.035],
 'H':  [1.63, 6,  3.2, -23.41, 0.5, 1.91, 0.8, -1.00, 0.035],
 'K':  [2.20, 38, 3.8, -22.97, 0.4, 2.74, 0.8, -1.00, 0.035],
 'L':  [3.60, 6,  0.7, -22.40, 0.2, 3.29, 0.8, -1.00, 0.035],
 'M':  [4.50, 6,  0.7, -21.84, 0.3, 3.29, 0.8, -1.00, 0.035],
}

bands = fits_lf.keys()
waves = [fits_lf[key][0] for key in fits_lf.keys()]

# Table 3
mlim = [22, 24, 26, 28, None] # cols

mean_ebl = {}
mean_ebl['B'] = (3.33, 1.72, -0.82), (2.26, 1.56, -0.71), (1.17, 1.24, -0.50),\
    (0.52, 0.88, -0.29), (4.92, 1.81, -0.88)
mean_ebl['V'] = (2.95, 1.54, -0.73), (1.90, 1.36, -0.61), (0.96, 1.05, -0.41),\
    (0.42, 0.73, -0.23), (5.65, 1.73, -0.85)
mean_ebl['R'] = (2.86, 1.54, -0.73), (1.75, 1.31, -0.58), (0.85, 0.98, -0.38),\
    (0.37, 0.67, -0.21), (6.56, 1.82, -0.92)
mean_ebl['I'] = (2.81, 1.58, -0.76), (1.58, 1.27, -0.55), (0.72, 0.92, -0.34),\
    (0.30, 0.61, -0.17), (7.97, 2.01, -1.06)
mean_ebl['J'] = (2.59, 1.56, -0.77), (1.20, 1.10, -0.47), (0.48, 0.72, -0.25),\
    (0.18, 0.45, -0.12), (9.60, 2.40, -1.28)
mean_ebl['H'] = (2.25, 1.50, -0.71), (0.96, 0.96, -0.40), (0.36, 0.57, -0.19),\
    (0.13, 0.34, -0.09), (9.34, 2.59, -1.29)
mean_ebl['K'] = (1.74, 1.41, -0.60), (0.69, 0.82, -0.30), (0.24, 0.44, -0.13),\
    (0.08, 0.23, -0.06), (8.09, 2.52, -1.14)
mean_ebl['L'] = (0.98, 1.05, -0.40), (0.34, 0.57, -0.17), (0.11, 0.27, -0.06),\
    (0.03, 0.12, -0.02), (4.87, 1.72, -0.71)
mean_ebl['M'] = (0.75, 0.83, -0.31), (0.24, 0.45, -0.13), (0.07, 0.20, -0.04),\
    (0.02, 0.09, -0.02), (3.28, 1.21, -0.49)

shot_power = {}
shot_power[2.4] = np.array([
  [16.64035309367155, 8.947442147488871e-7],
  [17.03779349270678, 6.512513695886596e-7],
  [17.44008072587658, 4.576067249660362e-7],
  [17.866602129719265, 3.207427713694311e-7],
  [18.294739144940138, 2.3031713268098218e-7],
  [18.734185439808357, 1.5233094952412815e-7],
  [19.169323437668066, 1.0032717087482696e-7],
  [19.6686550609546, 5.968110779205872e-8],
  [20.168848343642836, 3.452387424477065e-8],
  [20.575982410947216, 2.1301734293214625e-8],
  [21.04343263637076, 1.2003027763909986e-8],
  [21.43117936713684, 7.215334047762005e-9],
  [21.79092216734759, 4.708796422913264e-9],
  [22.204518680164732, 2.7859173149317675e-9],
  [22.592265410930807, 1.7110344026992965e-9],
  [22.999399478235187, 9.344598600988122e-10],
  [23.404379397035314, 5.5642905141525e-10],
  [23.821422547459267, 3.317174134008147e-10],
  [24.123864997456806, 2.4287606597077895e-10],
  [24.39528770899306, 1.4008489502899843e-10],
  [24.802421776297436, 8.060496611402559e-11],
  [25.17078117052521, 4.7583979190038705e-11],
  [25.51975322821468, 2.8130878303986672e-11],
  [25.8631860468932, 1.6401717540320986e-11],
  [26.227391011862764, 1.0144978708789645e-11],
  [26.571516235417658, 6.095381853566779e-12],
  [26.954416132049158, 3.65103777404423e-12],
  [27.322775526276928, 1.9403918554647205e-12],
  [27.652360247428092, 1.3201603153280434e-12],
  [27.951479154019065, 8.058374693803315e-13]
  ]
)

shot_power[3.6] = np.array([
  [16.53837334077149, 3.2122137665649366e-7],
  [16.995914483075456, 2.4781564244442667e-7],
  [17.439053603950974, 1.8577836697035109e-7],
  [17.873191461433702, 1.3937020170790627e-7],
  [18.333640704218418, 1.0029393317999334e-7],
  [18.762316256565356, 7.337946261361127e-8],
  [19.211610087453032, 4.779755690228675e-8],
  [19.67136692536138, 3.047140975530474e-8],
  [20.072038547152992, 2.018041353871142e-8],
  [20.536042134969726, 1.0878788258816965e-8],
  [20.950931136889427, 6.454910476901453e-9],
  [21.299903194578896, 4.066903409858004e-9],
  [21.62948791573006, 2.5263189510172573e-9],
  [22.03662198303444, 1.4018366597266092e-9],
  [22.44763351764648, 8.963466935286459e-10],
  [22.792728108028285, 5.36039473825014e-10],
  [23.16108750225606, 3.2949728814324306e-10],
  [23.548834233022134, 1.863842334562597e-10],
  [23.93658096378821, 1.0933322950469299e-10],
  [24.953339057797027, 2.3302292907071446e-11],
  [25.22390010993158, 1.5651719663597122e-11],
  [25.517725965912096, 9.588258479504951e-12],
  [25.9528639637718, 4.942759183221111e-12],
  [26.224286675308054, 3.6695609971777516e-12],
  [26.538361527228577, 2.128326555635214e-12],
  [26.9610054637636, 1.1549873920528318e-12],
  [27.24535306632539, 7.539375471500695e-13]
 ]
)

shot_power[4.5] = np.array([
  [16.498433064794003, 1.5199308176139573e-7],
  [16.909444599406044, 1.273804643202407e-7],
  [17.345936633468426, 1.0326615121885432e-7],
  [17.797384612860355, 7.950566162459107e-8],
  [18.269143135292413, 5.8562933556987566e-8],
  [18.737670434968088, 4.14848844281183e-8],
  [19.185517909002904, 2.848522437829685e-8],
  [19.617640098956652, 1.9148171083631486e-8],
  [19.98261440267774, 1.3035491020621335e-8],
  [20.542631466684163, 6.698194938269358e-9],
  [20.957520468603867, 4.4361922278316515e-9],
  [21.406198828490325, 2.253541754771642e-9],
  [21.737860764270593, 1.5158986019006152e-9],
  [22.073369393808463, 9.311067858941559e-10],
  [22.454222849360917, 5.470273905324887e-10],
  [22.80901110801188, 3.2684401302647013e-10],
  [23.077202596791743, 2.1884932017616067e-10],
  [23.47787421858336, 1.2339696367640044e-10],
  [24.505403055113455, 2.6489419637520433e-11],
  [24.83498777626462, 1.4240130867405144e-11],
  [25.13549149260833, 9.643846734446861e-12],
  [25.532931891643557, 5.089117508976061e-12],
  [25.95945329548624, 2.650017256031433e-12],
  [26.38597469932892, 1.4444166610817735e-12],
  [26.715559420480083, 8.728798692013312e-13],
  [27.041266674323587, 5.153701380888645e-13],
  [27.45227820893563, 2.923142979763538e-13]
 ]
)

def plot_ebl(ax, as_contours=True, **kwargs):
    """
    Plot the mean EBL [nW/m^2/sr] as a function of observed wavelength [microns].
    """
    waves_pl = []
    lo = []; hi = []
    for i, band in enumerate(bands):
        if band not in mean_ebl:
            continue

        if not as_contours:
            ax.scatter(waves[i], mean_ebl[band][-1][0], **kwargs)

            kw = kwargs.copy()
            if 'marker' in kwargs:
                del kw['marker']

            ax.plot([waves[i]]*2,
                mean_ebl[band][-1][0] + np.array(mean_ebl[band][-1][1:]),
                **kwargs)

        else:
            waves_pl.append(waves[i])
            lo.append(mean_ebl[band][-1][0] + np.array(mean_ebl[band][-1][1]))
            hi.append(mean_ebl[band][-1][0] + np.array(mean_ebl[band][-1][2]))

    ax.fill_between(waves_pl, lo, hi, **kwargs)

    return ax
