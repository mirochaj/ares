"""
Table 4
Power-law and Bias Measurements^a


"""

import numpy as np

cols4 = ['run', 'name', 'r_0', 'gamma', 'bias']
tab4 = \
[
 [1,	'blue-lowz',   (3.63, 0.14), (1.57, 0.05), (1.23, 0.08)],
 [1,	'red-lowz',	   (5.96, 0.20), (1.82, 0.11), (1.75, 0.04)],
 [1,	'blue-highz',  (2.79, 0.35), (1.53, 0.14), (1.23, 0.08)],
 [1,	'red-highz',   (5.88, 0.21), (1.82, 0.07), (2.04, 0.08)],
 [2,	'blue1-lowz',  (3.02, 0.14), (1.60, 0.10), (1.06, 0.06)],
 [2,	'blue2-lowz',  (3.76, 0.16), (1.62, 0.08), (1.18, 0.08)],
 [2,	'red1-lowz',   (5.46, 0.32), (1.89, 0.15), (1.64, 0.07)],
 [2,	'red2-lowz',   (6.82, 0.39), (1.75, 0.09), (1.90, 0.06)],
 [2,	'blue1-highz', (2.76, 0.12), (1.58, 0.11), (1.19, 0.12)],
 [2,	'blue2-highz', (3.56, 0.34), (1.55, 0.13), (1.45, 0.16)],
 [2,	'red1-highz',  (4.92, 0.55), (1.58, 0.06), (1.80, 0.29)],
 [2,	'red2-highz',  (7.60, 0.41), (1.91, 0.10), (2.56, 0.13)],
 [3,	'1-lowz',	   (3.11, 0.69), (1.86, 0.27), (0.97, 0.04)],
 [3,	'2-lowz',	   (3.27, 0.20), (1.56, 0.05), (1.13, 0.08)],
 [3,	'3-lowz',	   (3.55, 0.18), (1.66, 0.08), (1.13, 0.06)],
 [3,	'4-lowz',	   (4.88, 0.35), (1.69, 0.09), (1.48, 0.07)],
 [3,	'5-lowz',	   (5.92, 0.17), (2.04, 0.15), (1.74, 0.13)],
 [3,	'6-lowz',	   (6.67, 0.42), (1.57, 0.11), (1.90, 0.15)],
 [3,	'1-highz',	   (2.04, 0.21), (1.41, 0.06), (1.11, 0.18)],
 [3,	'2-highz',	   (3.57, 0.13), (1.73, 0.11), (1.35, 0.05)],
 [3,	'3-highz',	   (2.54, 0.45), (1.36, 0.12), (1.37, 0.16)],
 [3,	'4-highz',	   (3.19, 0.40), (1.66, 0.17), (1.25, 0.06)],
 [3,	'5-highz',	   (4.75, 0.54), (1.55, 0.13), (1.80, 0.17)],
 [3,	'6-highz',	   (8.29, 0.38), (1.81, 0.08), (2.73, 0.10)],
]

cols1 = ['run', 'name', 'z',
         'mass_min', 'mass_mean', 'mass_max',
         'ssfr_min', 'ssfr_mean', 'ssfr_max']

tab1 = \
[
 [1, 'blue-lowz',	7418,	0.51, 10.50, 10.71,	11.00,	-11.37,	-10.21,	-8.25],
 [1, 'red-lowz',	6349,	0.51, 10.50, 10.74,	11.00,	-13.08,	-11.61,	-10.70],
 [1, 'blue-highz',	6674,	0.89, 10.50, 10.73,	11.00,	-10.77,	-9.89, -8.11],
 [1, 'red-highz',	5169,	0.87, 10.50, 10.79,	11.00,	-12.23,	-11.09,	-10.16],
 [2, 'blue1-lowz',	21600,	0.52, 8.50,	 9.73,	10.50,	-10.03,	-9.26,	-7.94],
 [2, 'blue2-lowz',	23795,	0.41, 8.50,	 9.59,	10.50,	-11.25,	-9.80,	-8.75],
 [2, 'red1-lowz',	6797,	0.56, 10.10, 10.76,	11.60,	-12.16,	-11.35,	-10.59],
 [2, 'red2-lowz',	5641,	0.42, 10.10, 10.64,	11.60,	-13.32,	-11.92,	-11.26],
 [2, 'blue1-highz',	11087,	0.89, 8.70,	 9.91,	10.50,	-9.68,	-9.02,	-7.93],
 [2, 'blue2-highz',	7837,	0.82, 8.70,	 9.96,	10.50,	-10.62,	-9.58,	-8.52],
 [2, 'red1-highz',	5372,	0.92, 10.10, 10.97,	11.60,	-11.61,	-10.82,	-10.05],
 [2, 'red2-highz',	4257,	0.82, 10.10, 10.83,	11.60,	-12.23,	-11.41,	-10.75],
 [3, '1-lowz',	    4934,	0.53, 8.50,	9.26,	10.50,	-9.00,	-8.79,	-8.00],
 [3, '2-lowz',	    22744,	0.47, 8.50,	9.53,	10.50,	-9.60,	-9.33,	-9.00],
 [3, '3-lowz',	    16271,	0.44, 8.50,	9.91,	10.50,	-10.60,	-9.93,	-9.60],
 [3, '4-lowz',	    5437,	0.51, 10.00, 10.61,	11.50,	-11.20,	-10.90,	-10.60],
 [3, '5-lowz',	    6817,	0.52, 10.00, 10.67,	11.50,	-11.80,	-11.51,	-11.20],
 [3, '6-lowz',	    3824,	0.39, 10.00, 10.78,	11.50,	-12.60,	-12.06,	-11.80],
 [3, '1-highz',	    3861,	0.90, 9.00,	9.66,	11.00,	-8.90,	-8.66,	-8.00],
 [3, '2-highz',	    12770,	0.87, 9.00,	10.04,	11.00,	-9.60,	-9.27,	-8.90],
 [3, '3-highz',	    6914,	0.87, 9.50,	10.51,	11.00,	-10.20,	-9.85,	-9.60],
 [3, '4-highz',	    4888,	0.88, 10.20, 10.88,	11.70,	-10.80,	-10.49,	-10.20],
 [3, '5-highz',	    3337,	0.89, 10.20, 10.93,	11.70,	-11.20,	-11.00,	-10.80],
 [3, '6-highz',	    4109,	0.84, 10.20, 10.93,	11.70,	-11.80,	-11.42,	-11.20],
 [4, '1-lowz',	    7067,	0.49, 8.50,	9.12,	9.50,	-9.20,	-8.95,	-8.20],
 [4, '2-lowz',	    10577,	0.38, 8.50,	9.18,	9.50,	-10.20,	-9.48,	-9.20],
 [4, '3-lowz',	    3494,	0.56, 9.50,	9.78,	10.50,	-9.20,	-9.02,	-8.20],
 [4, '4-lowz',	    19817,	0.49, 9.50,	9.96,	10.50,	-10.20,	-9.65,	-9.20],
 [4, '5-lowz',	    5698,	0.45, 9.50,	10.15,	10.50,	-11.20,	-10.65,	-10.20],
 [4, '6-lowz',	    3618,	0.42, 9.50,	10.20,	10.50,	-12.20,	-11.59,	-11.20],
 [4, '7-lowz',	    3870,	0.53, 10.50, 10.74,	11.50,	-10.20,	-9.85,	-9.20],
 [4, '8-lowz',	    5875,	0.53, 10.50, 10.80,	11.50,	-11.20,	-10.68,	-10.20],
 [4, '9-lowz',	    6913,	0.51, 10.50, 10.86,	11.50,	-12.20,	-11.67,	-11.20],
 [4, '1-highz',	    2291,	0.82, 8.50,	9.31,	9.50,	-9.20,	-8.76,	-8.20],
 [4, '2-highz',	    6232,	0.90, 9.50,	9.89,	10.50,	-9.20,	-8.94,	-8.20],
 [4, '3-highz',	    9674,	0.85, 9.50,	10.13,	10.50,	-10.20,	-9.53,	-9.20],
 [4, '4-highz',	    944,	0.79, 9.50,	10.36,	10.50,	-11.20,	-10.61,	-10.20],
 [4, '5-highz',	    5964,	0.91, 10.50, 10.80,	11.50,	-10.20,	-9.80,	-9.20],
 [4, '6-highz',	    7295,	0.89, 10.50, 10.94,	11.50,	-11.20,	-10.70,	-10.20],
 [4, '7-highz',	    3949,	0.84, 10.50, 10.95,	11.50,	-12.10,	-11.44,	-11.20],
]

def get_bias(zbin, red=None):
    """
    Get bias measurement for given zbin, source population.

    Parameters
    ----------
    zbin : int
        Bin 0 is low redshift (0.2, 0.7), bin 1 is high redshift (0.7, 1.2).
    red : bool, None
        If None, returns bias for all galaxies, otherwise return sub-sample
        of red or blue galaxies.

    """

    masses = []
    massbins = []
    biases = []
    errors = []
    for i, row in enumerate(tab4):
        run, name, r_0, gamma, bias = row

        # Figure out mass and sSFR bin
        _run, _name, N, z, mass_min, mass_mean, mass_max, \
            ssfr_min, ssfr_mean, ssfr_max = tab1[i]

        assert run == _run
        assert name == _name

        if zbin == 0 and 'lowz' not in name:
            continue

        if zbin == 1 and 'highz' not in name:
            continue

        if (red is None) and ('red' in name or 'blue' in name):
            continue

        if red == True and ('red' not in name):
            continue

        if red == False and ('blue' not in name):
            continue

        masses.append(mass_mean)
        massbins.append((mass_min, mass_max))
        biases.append(bias[0])
        errors.append(bias[1])

    masses = np.array(masses)
    massbins = np.array(massbins)
    biases = np.array(biases)
    errors = np.array(errors)
    sorter = np.argsort(masses)

    return masses[sorter], massbins[sorter], biases[sorter], errors[sorter]
