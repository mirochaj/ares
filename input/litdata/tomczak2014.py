"""
Tomczak et al., 2014, ApJ, 783, 85
"""

import numpy as np

info = \
{
 'reference':'Tomczak et al., 2014, ApJ, 783, 85',
 'data': 'Table 1', 
 'imf': ('chabrier', (0.1, 100.)),
}

redshifts = [0.35, 0.875, 1.125, 1.75, 2.25, 2.75]
wavelength = 1600.

ULIM = -1e10

fits = {}

# Table 1
tmp_data = {}
tmp_data['smf_tot'] = \
{
 0.875: {'M': list(10**np.arange(8.50, 11.50, 0.25)),
     'phi': [-1.70, -1.86, -2.01, -2.10, -2.23, -2.39, -2.45, -2.45, -2.52, -2.59, -2.93, -3.47],
     'err': [(0.05, 0.06), (0.05, 0.06), (0.06, 0.06), (0.06, 0.07),
             (0.06, 0.07), (0.07, 0.08), (0.07, 0.09), (0.07, 0.09),
             (0.08, 0.09), (0.08, 0.10), (0.10, 0.13), (0.11, 0.15)],
    },
 1.125: {'M': list(10**np.arange(8.75, 11.50, 0.25)),
     'phi': [-1.99, -2.14, -2.24, -2.29, -2.48, -2.59, -2.73, -2.64, -2.72, -3.01, -3.62],
     'err': [(0.06, 0.06), (0.06, 0.07), (0.06, 0.07), (0.06, 0.07),
             (0.07, 0.08), (0.08, 0.09), (0.08, 0.10), (0.07, 0.09),
             (0.08, 0.10), (0.10, 0.12), (0.11, 0.15)],
    },
 1.75: {'M': list(10**np.arange(9.00, 11.75, 0.25)),
     'phi': [-2.20, -2.31, -2.41, -2.54, -2.67, -2.76, -2.87, -3.03, -3.13, -3.56, -4.27],
     'err': [(0.05, 0.06), (0.05, 0.06), (0.05, 0.06), (0.06, 0.06),
             (0.06, 0.07), (0.06, 0.07), (0.07, 0.08), (0.08, 0.09),
             (0.08, 0.10), (0.10, 0.13), (0.12, 0.15)],
    },
 2.25: {'M': list(10**np.arange(9.25, 11.75, 0.25)),
     'phi': [-2.53, -2.50, -2.63, -2.74, -2.91, -3.07, -3.35, -3.54, -3.89, -4.41],
     'err': [(0.06, 0.07), (0.06, 0.07), (0.06, 0.07), (0.07, 0.08),
             (0.08, 0.09), (0.09, 0.10), (0.10, 0.13), (0.12, 0.16),
             (0.12, 0.17), (0.14, 0.19)],
    },
 2.75: {'M': list(10**np.arange(9.5, 11.75, 0.25)),
     'phi': [-2.65, -2.78, -3.02, -3.21, -3.35, -3.74, -4.00, -4.14, -4.73],
     'err': [(0.06, 0.07), (0.07, 0.08), (0.08, 0.09),
             (0.09, 0.10), (0.10, 0.13), (0.13, 0.17),
             (0.18, 0.25), (0.17, 0.28), (0.31, 2.00)],
    },            
}


tmp_data['smf_sf'] = \
{
 0.35: {'M': list(10**np.arange(8.00, 11.50, 0.25)),
     'phi': [-1.42, -1.59, -1.76, -1.91, -2.08, -2.06, -2.17, -2.25, -2.36, -2.50, -2.63, -2.91, -3.43, -4.39],
     'err': [(0.06, 0.07), (0.06, 0.07), (0.07, 0.08), (0.07, 0.08),
             (0.08, 0.09), (0.07, 0.08), (0.07, 0.09), (0.08, 0.10),
             (0.08, 0.10), (0.08, 0.09), (0.09, 0.11), (0.10, 0.12), (0.13, 0.18), (0.30, 0.41)],
    },
 0.875: {'M': list(10**np.arange(8.50, 11.50, 0.25)),
     'phi': [-1.72, -1.88, -2.04, -2.14, -2.27, -2.47, -2.55, -2.60, -2.77, -2.91, -3.37, -4.17],
     'err': [(0.05, 0.06), (0.05, 0.06), (0.06, 0.06), (0.06, 0.07),
             (0.06, 0.07), (0.07, 0.08), (0.08, 0.09), (0.07, 0.09),
             (0.08, 0.09), (0.09, 0.11), (0.10, 0.13), (0.16, 0.20)],
    },
 1.125: {'M': list(10**np.arange(8.75, 11.50, 0.25)),
     'phi': [-2.00, -2.16, -2.26, -2.32, -2.52, -2.68, -2.88, -2.81, -2.99, -3.29, -4.21],
     'err': [(0.06, 0.06), (0.06, 0.07), (0.06, 0.07), (0.06, 0.07),
             (0.07, 0.08), (0.08, 0.09), (0.09, 0.10), (0.07, 0.09),
             (0.08, 0.10), (0.10, 0.13), (0.15, 0.20)],
    },
 1.75: {'M': list(10**np.arange(9.00, 11.75, 0.25)),
     'phi': [-2.20, -2.32, -2.42, -2.56, -2.73, -2.89, -3.07, -3.26, -3.35, -3.85, -4.78],
     'err': [(0.05, 0.06), (0.05, 0.06), (0.05, 0.06), (0.06, 0.06),
             (0.06, 0.07), (0.07, 0.07), (0.07, 0.09), (0.09, 0.10),
             (0.09, 0.11), (0.10, 0.13), (0.17, 0.21)],
    },
 2.25: {'M': list(10**np.arange(9.25, 11.75, 0.25)),
     'phi': [-2.53, -2.51, -2.67, -2.78, -3.00, -3.26, -3.54, -3.69, -4.00, -4.59],
     'err': [(0.06, 0.07), (0.06, 0.07), (0.06, 0.07), (0.07, 0.08),
             (0.08, 0.09), (0.09, 0.11), (0.11, 0.14), (0.13, 0.17),
             (0.13, 0.17), (0.15, 0.21)],
    },
 2.75: {'M': list(10**np.arange(9.5, 11.75, 0.25)),
     'phi': [-2.66, -2.79, -3.06, -3.32, -3.59, -3.97, -4.16, -4.32, -4.94],
     'err': [(0.06, 0.07), (0.07, 0.08), (0.08, 0.09),
             (0.09, 0.11), (0.11, 0.14), (0.16, 0.20),
             (0.20, 0.28), (0.18, 0.29), (0.32, 2.00)],
    },            
}


tmp_data['smf_q'] = \
{ 0.35: {'M': [0],
     'phi': [0],
     'err': [(10000.0, 100000.0)]
     },

  0.875: {'M': list(10**np.arange(9.00, 11.50, 0.25)),
     'phi': [-3.19, -3.17, -3.33, -3.16, -3.16, -2.97, -2.89, -2.87, -3.12, -3.57],
     'err': [(0.11, 0.12), (0.10, 0.12), (0.12, 0.14), (0.11, 0.12),
             (0.11, 0.12), (0.08, 0.09), (0.08, 0.10), (0.09, 0.11),
             (0.10, 0.13), (0.12, 0.15)],
    },
 1.125: {'M': list(10**np.arange(9.00, 11.50, 0.25)),
     'phi': [-3.46, -3.65, -3.46, -3.57, -3.37, -3.26, -3.11, -3.05, -3.33, -3.75],
     'err': [(0.12, 0.14), (0.15, 0.17), (0.13, 0.14), (0.14, 0.16),
             (0.12, 0.14), (0.11, 0.13), (0.08, 0.09), (0.08, 0.10),
             (0.10, 0.13), (0.12, 0.16)],
    },
 1.75: {'M': list(10**np.arange(9.50, 11.75, 0.25)),
     'phi': [-4.14, -3.95, -3.55, -3.35, -3.30, -3.40, -3.54, -3.87, -4.44],
     'err': [(0.17, 0.19), (0.14, 0.15), (0.09, 0.11), (0.08, 0.09),
             (0.08, 0.09), (0.09, 0.11), (0.09, 0.11), (0.10, 0.13),
             (0.13, 0.16)],
    },
 2.25: {'M': list(10**np.arange(9.75, 11.75, 0.25)),
     'phi': [-3.72, -3.76, -3.64, -3.53, -3.82, -4.08, -4.54, -4.89],
     'err': [(0.11, 0.12), (0.11, 0.13), (0.11, 0.12), (0.10, 0.12),
             (0.13, 0.16), (0.17, 0.22), (0.15, 0.21), (0.19, 0.26)],
    },
 2.75: {'M': list(10**np.arange(9.75, 11.75, 0.25)),
     'phi': [-4.16, -4.08, -3.89, -3.74, -4.12, -4.51, -4.61, -5.14],
     'err': [(0.17, 0.20), (0.16, 0.18), (0.13, 0.15), (0.12, 0.15), 
             (0.18, 0.22), (0.27, 0.38), (0.19, 0.32), (0.34, 2.00)],
    },            
}

units = {'smf_tot': 'log10', 'smf_sf': 'log10', 'smf': 'log10', 'smf_q': 'log10'}

data = {}
data['smf_tot'] = {}
data['smf_sf'] = {}
data['smf_q'] = {}
for group in ['smf_tot', 'smf_sf', 'smf_q']:
    
    for key in tmp_data[group]:
        
        if key not in tmp_data[group]:
            continue
    
        subdata = tmp_data[group]
        
        mask = []
        for element in subdata[key]['err']:
            if element == ULIM:
                mask.append(1)
            else:
                mask.append(0)
        
        mask = np.array(mask)
        
        data[group][key] = {}
        data[group][key]['M'] = np.ma.array(subdata[key]['M'], mask=mask) 
        data[group][key]['phi'] = np.ma.array(subdata[key]['phi'], mask=mask) 
        data[group][key]['err'] = tmp_data[group][key]['err']

#default is the star-forming galaxies data only
data['smf'] = data['smf_sf']